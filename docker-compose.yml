version: '3.9'

services:

  # App frontend service
  app-client:
    container_name: app-client
    build:
      context: react-ui
      dockerfile: Dockerfile
    ports:
      - '${FRONTEND_LOCAL_PORT:?error}:${FRONTEND_DOCKER_PORT:?error}'
    restart: no
    depends_on:
      - app-server
    environment:
      FRONTEND_SERVER: app-client
      BACKEND_SERVER: app-server
    networks:
      - frontend

  # App backend service
  app-server:
    container_name: app-server
    build:
      context: springboot-backend
      dockerfile: Dockerfile
    ports:
      - '${BACKEND_DEFAULT_PORT:?error}'
    restart: no
    depends_on:
      app-db:
        condition: service_healthy
    environment:
      FRONTEND_SERVER: app-client
      DB_SERVER: app-db
      DB_DEFAULT_PORT: $DB_DEFAULT_PORT
      DB_SCHEMA: $DB_SCHEMA
      DB_USER: $DB_USER
      DB_PASSWORD: $DB_PASSWORD
    networks:
      - backend
      - frontend

  # Database service (Mysql)
  app-db:
    container_name: app-db
    build:
      context: mysql-database
      dockerfile: Dockerfile
      args:
        - MYSQL_DATABASE=$DB_SCHEMA
    expose:
      - '${DB_DEFAULT_PORT:?error}'
    restart: no
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-u", "root", "-proot" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: $DB_SCHEMA
      MYSQL_USER: $DB_USER
      MYSQL_PASSWORD: $DB_PASSWORD
      MYSQL_RANDOM_ROOT_PASSWORD: true
      MYSQL_ONETIME_PASSWORD: true
      MYSQL_INITDB_SKIP_TZINFO: true
    networks:
      - backend


volumes:
  db-data:


networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge